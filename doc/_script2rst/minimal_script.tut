
.. note::
   This tutorial was generated from the python source
   :file:`[ptypy_root]/tutorial/minimal_script.py` using :file:`ptypy/doc/script2rst.py`. 
   You are encouraged to modify the parameters and rerun the tutorial with::
   
     $ python [ptypy_root]/tutorial/minimal_script.py

This tutorial explains the minimal settings to get a reconstruction
runnig in |ptypy|. A |ptypy| script consists of two parts:

* Creation of a parameter tree with parameters 
  as listed in :ref:`parameters` and 
* calling a :any:`Ptycho` instance with this parameter tree 
  at a certain level that determines how much the Ptycho 
  instance will do.

Preparing the parameter tree
----------------------------

We begin with opening an empty python file of arbitrary name
in an editor of your choice, e.g.::

  $ gedit minimal_script.py

Next we create an empty parameter tree. In |ptypy|, parameters
are managed by the :any:`Param` class which is a subclass of Pythons
dict type. It acts like a composite of 
of dictionary and object, meaning that all dictionary items may be accessed as class attributes. 

::

   >>> from ptypy import utils as u
   >>> p = u.Param()  # root level

We set the verbosity to a high level, in order to have information of the
reconstruction process printed to the terminal. 
See :py:data:`.verbose_level`.

::

   >>> p.verbose_level = 3

We limit this reconstruction to single precision, but you may as well
use double precision.

::

   >>> p.data_type = "single"

We give this reconstruction the name ``'minimal'`` although it 
will automatically choose one from the script if we put in ``None``.
(But then the tutorial may not work on your computer as the chosen
run name may differ from the one that this tutorial was created with)

::

   >>> p.run = 'minimal'

Next, we set the home path. The :any:`Ptycho` instance will use this 
path as base for any other file path (e.g :py:data:`.io.autosave.path` 
or :py:data:`.io.rfile`) in the tree lacks a leading "/"
(or "C:\\" on windows). Make sure to replace all "/" with "\\" 
if you run the scripts on a Windows system.

::

   >>> p.io = u.Param()
   >>> p.io.home = "/tmp/ptypy/"

We want an intermediate result of the reconstruction 
to be dumped regularly every 10 reconstructions.

::

   >>> p.io.autosave = u.Param()
   >>> p.io.autosave.interval = 20

In this tutorial we switch of the threaded plotting client.

::

   >>> p.io.autoplot = False

Since we do not want to plot anything, we don't need the 
interaction server either.

::

   >>> p.io.interaction = False

Now we have to put in actual parameters associated with a 
ptychographic scan.

The ``scan`` branch of the tree holds all *common* parameters for scans
and can be regarded as template in case of a many-scans reconstruction. 
However, if there is only one scan, it does not matter if we specify 
parameters for illumination or sample in this branch 
or in ``scans``. In this tutorial
case we do not bother to enter paramter but leave the branch empty
(It will be filled with the defaults of :py:data:`.scan` ) .

::

   >>> p.scan = u.Param()

The ``scans`` branch marks all differences for a scan with respect
to the *default* ``scan`` branch mentioned above. 
Different for each scan is at least the ``data`` branch
:py:data:`.scan.data`. In this tutorial we 
create a new scan parameter branch ``MF`` where we only specify 
the data branch and tell |ptypy| to use scan meta data of when possible.

::

   >>> p.scans = u.Param()
   >>> p.scans.MF = u.Param()
   >>> p.scans.MF.if_conflict_use_meta = True
   >>> p.scans.MF.data= u.Param()

As data source we have choosen the *'test'* source. 
That will make |ptypy| use the internal 
:py:class:`~ptypy.core.data.MoonFlowerScan` class.
This class is meant for testing, and it provides/ simulates 
diffraction patterns without using the more complex generic 
:any:`SimScan` class.

::

   >>> p.scans.MF.data.source = 'test'

We set the diffraction frame shape to a small value (128x128px) and 
limit the number af diffraction patterns at 100. The 
:py:class:`~ptypy.core.data.MoonFlowerScan` instance will balance the
diffraction patterns accordingly.

::

   >>> p.scans.MF.data.shape = 128
   >>> p.scans.MF.data.num_frames = 100

We skip saving the "prepared" data file for now. The |ptypy| data
management is described in detail in :ref:`ptypy_data`

::

   >>> p.scans.MF.data.save = None

Needlees to say, we need to specify a reconstruction engine. We choose
20 iterations of difference map algorithm.

::

   >>> p.engines = u.Param()
   >>> p.engines.engine00 = u.Param()
   >>> p.engines.engine00.name = 'DM'
   >>> p.engines.engine00.numiter = 40
   >>> p.engines.engine00.numiter_contiguous = 5

Running ptypy
-------------

We import the :any:`Ptycho` class and pass the tree ``p`` at level 5.
That will make the reconstruction start immediately after 
and will sequentially initialize and use 
all engines in ``p.engines``

::

   >>> from ptypy.core import Ptycho
   >>> P = Ptycho(p,level=5)
   Verbosity set to 3
   Data type:               single
   
   ---- Ptycho init level 1 -------------------------------------------------------
   Model: sharing probe between scans (one new probe every 1 scan)
   Model: sharing probe between scans (one new probe every 1 scan)
   
   ---- Ptycho init level 2 -------------------------------------------------------
   Prepared 92 positions
   Processing new data.
   ---- Enter PtyScan.initialixe() ------------------------------------------------
                Common weight : True
                       shape = (128, 128)
   All experimental positions : True
                       shape = (92, 2)
   Scanning positions (92) are fewer than the desired number of scan points (100).
   Resetting `num_frames` to lower value
   ---- Leaving PtyScan.initialixe() ----------------------------------------------
   ROI center is [ 64.  64.], automatic guess is [ 63.43478261  63.55434783].
   Feeding data chunk
   Importing data from MF as scan MF.
   End of scan reached
   End of scan reached
   
   --- Scan MF photon report ---
   Total photons   : 3.66e+09 
   Average photons : 3.98e+07
   Maximum photons : 7.13e+07
   -----------------------------
   
   ---- Creating PODS -------------------------------------------------------------
   Found these probes : 
   Found these objects: 
   Process 0 created 92 new PODs, 1 new probes and 1 new objects.
   
   ---- Probe initialization ------------------------------------------------------
   Initializing probe storage S00G00 using scan MF
   Found no photon count for probe in parameters.
   Using photon count 7.13e+07 from photon report
   
   ---- Object initialization -----------------------------------------------------
   Initializing object storage S00G00 using scan MF
   Simulation resource is object transmission
   
   ---- Creating exit waves -------------------------------------------------------
   
   Process #0 ---- Total Pods 92 (92 active) ----
   --------------------------------------------------------------------------------
   (C)ontnr : Memory : Shape            : Pixel size      : Dimensions      : Views
   (S)torgs : (MB)   : (Pixel)          : (meters)        : (meters)        : act. 
   --------------------------------------------------------------------------------
   Cprobe   :    0.1 : complex64
   S00G00   :    0.1 :        1*128*128 :   6.36*6.36e-08 :   8.14*8.14e-06 :    92
   Cmask    :    1.5 :   bool
   S0000    :    1.5 :       92*128*128 :   1.72*1.72e-04 :   2.20*2.20e-02 :    92
   Cexit    :   12.1 : complex64
   S0000G00 :   12.1 :       92*128*128 :   6.36*6.36e-08 :   8.14*8.14e-06 :    92
   Cobj     :    1.3 : complex64
   S00G00   :    1.3 :        1*394*408 :   6.36*6.36e-08 :   2.51*2.60e-05 :    92
   Cdiff    :    6.0 : float32
   S0000    :    6.0 :       92*128*128 :   1.72*1.72e-04 :   2.20*2.20e-02 :    92
   
   
   
   ---- Ptycho init level 3 -------------------------------------------------------
   
   ---- Ptycho init level 4 -------------------------------------------------------
   
   ==== Starting DM-algoritm. =====================================================
   
   Parameter set:
   * id3VUSECUSBO           : ptypy.utils.parameters.Param(16)
     * clip_object          : None
     * fourier_relax_factor : 0.05
     * numiter_contiguous   : 5
     * overlap_converge_... : 0.1
     * probe_update_start   : 0
     * probe_inertia        : 0.001
     * name                 : DM
     * subpix_start         : 0
     * update_object_first  : True
     * obj_smooth_std       : None
     * alpha                : 1
     * overlap_max_itera... : 10
     * object_inertia       : 0.1
     * numiter              : 40
     * probe_support        : 0.8
     * subpix               : linear
   ================================================================================
   ---------------------------------- Autosaving ----------------------------------
   WARNING root - Save file exists but will be overwritten (force_overwrite is True)
   Generating copies of probe, object and parameters and runtime
   Saving to /tmp/ptypy/dumps/minimal/minimal_None_0000.ptyr
   --------------------------------------------------------------------------------
   Time spent in Fourier update: 1.17
   Time spent in Overlap update: 0.34
   Iteration #5 of DM :: Time 1.50
   Errors :: Fourier 1.21e+03, Photons 2.12e+03, Exit 8.43e+02
   Time spent in Fourier update: 1.18
   Time spent in Overlap update: 0.21
   Iteration #10 of DM :: Time 1.39
   Errors :: Fourier 9.52e+02, Photons 8.26e+02, Exit 6.01e+02
   Time spent in Fourier update: 1.15
   Time spent in Overlap update: 0.21
   Iteration #15 of DM :: Time 1.36
   Errors :: Fourier 9.02e+02, Photons 5.36e+02, Exit 4.17e+02
   Time spent in Fourier update: 1.15
   Time spent in Overlap update: 0.21
   Iteration #20 of DM :: Time 1.36
   Errors :: Fourier 7.28e+02, Photons 2.99e+02, Exit 2.52e+02
   ---------------------------------- Autosaving ----------------------------------
   WARNING root - Save file exists but will be overwritten (force_overwrite is True)
   Generating copies of probe, object and parameters and runtime
   Saving to /tmp/ptypy/dumps/minimal/minimal_DM_0020.ptyr
   --------------------------------------------------------------------------------
   Time spent in Fourier update: 1.15
   Time spent in Overlap update: 0.21
   Iteration #25 of DM :: Time 1.35
   Errors :: Fourier 5.35e+02, Photons 1.51e+02, Exit 1.23e+02
   Time spent in Fourier update: 1.17
   Time spent in Overlap update: 0.21
   Iteration #30 of DM :: Time 1.38
   Errors :: Fourier 3.89e+02, Photons 6.78e+01, Exit 6.10e+01
   Time spent in Fourier update: 1.16
   Time spent in Overlap update: 0.21
   Iteration #35 of DM :: Time 1.37
   Errors :: Fourier 2.74e+02, Photons 3.68e+01, Exit 3.16e+01
   Time spent in Fourier update: 1.15
   Time spent in Overlap update: 0.21
   Iteration #40 of DM :: Time 1.36
   Errors :: Fourier 1.66e+02, Photons 2.19e+01, Exit 1.60e+01
   WARNING root - Save file exists but will be overwritten (force_overwrite is True)
   Generating shallow copies of probe, object and parameters and runtime
   Saving to /tmp/ptypy/recons/minimal/minimal_DM.ptyr
   

From the terminal log, we note that there was an autosave every 20
iterations and the error reduced itself from iteration to iteration.

